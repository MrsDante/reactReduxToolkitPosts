{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport axios from \"axios\";\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  //'idle' | 'loading' | 'succeeded' | 'failed\n  error: null\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  try {\n    const response = await axios.get(POSTS_URL);\n    return [...response.data];\n  } catch (err) {\n    return err.message;\n  }\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0\n            }\n          }\n        };\n      }\n    },\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    }\n  }\n});\nexport const selectAllPosts = state => state.posts.posts;\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","sub","axios","POSTS_URL","initialState","posts","status","error","fetchPosts","response","get","data","err","message","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","content","userId","id","date","Date","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","reactionAdded","postId","reaction","existingPost","find","post","selectAllPosts","actions"],"sources":["/Users/MrsDante/Desktop/React/reactReduxToolkitPosts/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport axios from \"axios\";\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\nconst initialState = {\n    posts: [],\n    status: 'idle', //'idle' | 'loading' | 'succeeded' | 'failed\n    error: null,\n}\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n    try {\n        const response = await axios.get(POSTS_URL);\n        return [...response.data];\n    } catch (err) {\n        return err.message;\n    }\n})\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        postAdded: {\n            reducer (state, action) {\n              state.posts.push(action.payload)\n            },\n            prepare(title, content, userId) {\n                return {\n                        payload: {\n                        id: nanoid(),\n                        title,\n                        content,\n                        date: new Date().toISOString(),\n                        userId,\n                        reactions: {\n                            thumbsUp: 0,\n                            wow: 0,\n                            heart: 0,\n                            rocket: 0,\n                            coffee: 0\n                        }\n                    }\n                }\n            }\n        },\n        reactionAdded(state, action) {\n            const { postId, reaction } = action.payload;\n            const existingPost = state.posts.find(post => post.id === postId);\n\n            if (existingPost) {\n                existingPost.reactions[reaction]++;\n            }\n        }\n    }\n});\n\nexport const selectAllPosts = (state) => state.posts.posts;\n\nexport const { postAdded, reactionAdded } = postsSlice.actions;\n\nexport default postsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,EAAEC,gBAAgB,QAAQ,kBAAkB;AACxE,SAASC,GAAG,QAAQ,UAAU;AAC9B,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAG,4CAA4C;AAE9D,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGR,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACvE,IAAI;IACA,MAAMS,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAACP,SAAS,CAAC;IAC3C,OAAO,CAAC,GAAGM,QAAQ,CAACE,IAAI,CAAC;EAC7B,CAAC,CAAC,OAAOC,GAAG,EAAE;IACV,OAAOA,GAAG,CAACC,OAAO;EACtB;AACJ,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAGhB,WAAW,CAAC;EAC3BiB,IAAI,EAAE,OAAO;EACbX,YAAY;EACZY,QAAQ,EAAE;IACNC,SAAS,EAAE;MACPC,OAAO,CAAEC,KAAK,EAAEC,MAAM,EAAE;QACtBD,KAAK,CAACd,KAAK,CAACgB,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;MAClC,CAAC;MACDC,OAAO,CAACC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAE;QAC5B,OAAO;UACCJ,OAAO,EAAE;YACTK,EAAE,EAAE5B,MAAM,EAAE;YACZyB,KAAK;YACLC,OAAO;YACPG,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;YAC9BJ,MAAM;YACNK,SAAS,EAAE;cACPC,QAAQ,EAAE,CAAC;cACXC,GAAG,EAAE,CAAC;cACNC,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE,CAAC;cACTC,MAAM,EAAE;YACZ;UACJ;QACJ,CAAC;MACL;IACJ,CAAC;IACDC,aAAa,CAAClB,KAAK,EAAEC,MAAM,EAAE;MACzB,MAAM;QAAEkB,MAAM;QAAEC;MAAS,CAAC,GAAGnB,MAAM,CAACE,OAAO;MAC3C,MAAMkB,YAAY,GAAGrB,KAAK,CAACd,KAAK,CAACoC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACf,EAAE,KAAKW,MAAM,CAAC;MAEjE,IAAIE,YAAY,EAAE;QACdA,YAAY,CAACT,SAAS,CAACQ,QAAQ,CAAC,EAAE;MACtC;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMI,cAAc,GAAIxB,KAAK,IAAKA,KAAK,CAACd,KAAK,CAACA,KAAK;AAE1D,OAAO,MAAM;EAAEY,SAAS;EAAEoB;AAAc,CAAC,GAAGvB,UAAU,CAAC8B,OAAO;AAE9D,eAAe9B,UAAU,CAACI,OAAO"},"metadata":{},"sourceType":"module"}