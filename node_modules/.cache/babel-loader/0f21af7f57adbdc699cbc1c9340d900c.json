{"ast":null,"code":"import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from 'date-fns';\nimport axios from \"axios\";\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  //'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null,\n  count: 0\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await axios.get(POSTS_URL);\n  return response.data;\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async initialPost => {\n  const response = await axios.post(POSTS_URL, initialPost);\n  return response.data;\n});\nexport const updatePost = createAsyncThunk('posts/updatePost', async initialPost => {\n  const {\n    id\n  } = initialPost;\n  try {\n    const response = await axios.put(`${POSTS_URL}/${id}`, initialPost);\n    return response.data;\n  } catch (err) {\n    //return initialPost; \n    return initialPost;\n  }\n});\nexport const deletePost = createAsyncThunk('posts/deletePost', async initialPost => {\n  const {\n    id\n  } = initialPost;\n  try {\n    const response = await axios.delete(`${POSTS_URL}/${id}`);\n    if ((response === null || response === void 0 ? void 0 : response.status) === 200) return initialPost;\n    return `${response === null || response === void 0 ? void 0 : response.status}: ${response === null || response === void 0 ? void 0 : response.statusText}`;\n  } catch (err) {\n    return err.message;\n  }\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0\n            }\n          }\n        };\n      }\n    },\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      let min = 1;\n      const loadedPosts = action.payload.map(post => {\n        post.date = sub(new Date(), {\n          minutes: min++\n        }).toISOString();\n        post.reactions = {\n          thumbsUp: 0,\n          wow: 0,\n          heart: 0,\n          rocket: 0,\n          coffee: 0\n        };\n        return post;\n      });\n      state.posts = state.posts.concat(loadedPosts);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewPost.fulfilled, (state, action) => {\n      const sortedPosts = state.posts.sort((a, b) => {\n        if (a.id > b.id) return 1;\n        if (a.id < b.id) return -1;\n        return 0;\n      });\n      action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n      action.payload.userId = Number(action.payload.userId);\n      action.payload.date = new Date().toISOString();\n      action.payload.reactions = {\n        thumbsUp: 0,\n        wow: 0,\n        heart: 0,\n        rocket: 0,\n        coffee: 0\n      };\n      console.log(action.payload);\n      state.posts.push(action.payload);\n    }).addCase(updatePost.fulfilled, (state, action) => {\n      var _action$payload;\n      if (!((_action$payload = action.payload) !== null && _action$payload !== void 0 && _action$payload.id)) {\n        console.log('Update could not complete');\n        console.log(action.payload);\n        return;\n      }\n      const {\n        id\n      } = action.payload;\n      action.payload.date = new Date().toISOString();\n      const posts = state.posts.filter(post => post.id !== id);\n      state.posts = [...posts, action.payload];\n    }).addCase(deletePost.fulfilled, (state, action) => {\n      var _action$payload2;\n      if (!((_action$payload2 = action.payload) !== null && _action$payload2 !== void 0 && _action$payload2.id)) {\n        console.log('Delete could not complete');\n        console.log(action.payload);\n        return;\n      }\n      const {\n        id\n      } = action.payload;\n      const posts = state.posts.filter(post => post.id !== id);\n      state.posts = posts;\n    });\n  }\n});\nexport const selectAllPosts = state => state.posts.posts;\nexport const getPostsStatus = state => state.posts.status;\nexport const getPostsError = state => state.posts.error;\nexport const selectPostById = (state, postId) => state.posts.posts.find(post => post.id === postId);\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","createAsyncThunk","sub","axios","POSTS_URL","initialState","posts","status","error","count","fetchPosts","response","get","data","addNewPost","initialPost","post","updatePost","id","put","err","deletePost","delete","statusText","message","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","title","content","userId","date","Date","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","reactionAdded","postId","reaction","existingPost","find","extraReducers","builder","addCase","pending","fulfilled","min","loadedPosts","map","minutes","concat","rejected","sortedPosts","sort","a","b","length","Number","console","log","filter","selectAllPosts","getPostsStatus","getPostsError","selectPostById","actions"],"sources":["/Users/MrsDante/Desktop/React/reactReduxToolkitPosts/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sub } from 'date-fns';\nimport axios from \"axios\";\n\nconst POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\n\nconst initialState = {\n    posts: [],\n    status: 'idle', //'idle' | 'loading' | 'succeeded' | 'failed'\n    error: null,\n    count: 0\n}\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n    const response = await axios.get(POSTS_URL)\n    return response.data\n})\n\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async (initialPost) => {\n    const response = await axios.post(POSTS_URL, initialPost)\n    return response.data\n})\n\nexport const updatePost = createAsyncThunk('posts/updatePost', async (initialPost) => {\n    const { id } = initialPost;\n    try {\n        const response = await axios.put(`${POSTS_URL}/${id}`, initialPost)\n        return response.data\n    } catch (err) {\n        //return initialPost; \n        return initialPost;\n    }\n})\n\nexport const deletePost = createAsyncThunk('posts/deletePost', async (initialPost) => {\n    const { id } = initialPost;\n    try {\n        const response = await axios.delete(`${POSTS_URL}/${id}`)\n        if (response?.status === 200) return initialPost;\n        return `${response?.status}: ${response?.statusText}`;\n    } catch (err) {\n        return err.message;\n    }\n})\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        postAdded: {\n            reducer(state, action) {\n                state.posts.push(action.payload)\n            },\n            prepare(title, content, userId) {\n                return {\n                    payload: {\n                        id: nanoid(),\n                        title,\n                        content,\n                        date: new Date().toISOString(),\n                        userId,\n                        reactions: {\n                            thumbsUp: 0,\n                            wow: 0,\n                            heart: 0,\n                            rocket: 0,\n                            coffee: 0\n                        }\n                    }\n                }\n            }\n        },\n        reactionAdded(state, action) {\n            const { postId, reaction } = action.payload\n            const existingPost = state.posts.find(post => post.id === postId)\n            if (existingPost) {\n                existingPost.reactions[reaction]++\n            }\n        }\n    },\n    extraReducers(builder) {\n        builder\n            .addCase(fetchPosts.pending, (state, action) => {\n                state.status = 'loading'\n            })\n            .addCase(fetchPosts.fulfilled, (state, action) => {\n                state.status = 'succeeded'\n                let min = 1;\n                const loadedPosts = action.payload.map(post => {\n                    post.date = sub(new Date(), { minutes: min++ }).toISOString();\n                    post.reactions = {\n                        thumbsUp: 0,\n                        wow: 0,\n                        heart: 0,\n                        rocket: 0,\n                        coffee: 0\n                    }\n                    return post;\n                });\n\n                state.posts = state.posts.concat(loadedPosts)\n            })\n            .addCase(fetchPosts.rejected, (state, action) => {\n                state.status = 'failed'\n                state.error = action.error.message\n            })\n            .addCase(addNewPost.fulfilled, (state, action) => {\n                const sortedPosts = state.posts.sort((a, b) => {\n                    if (a.id > b.id) return 1\n                    if (a.id < b.id) return -1\n                    return 0\n                })\n                action.payload.id = sortedPosts[sortedPosts.length - 1].id + 1;\n\n                action.payload.userId = Number(action.payload.userId)\n                action.payload.date = new Date().toISOString();\n                action.payload.reactions = {\n                    thumbsUp: 0,\n                    wow: 0,\n                    heart: 0,\n                    rocket: 0,\n                    coffee: 0\n                }\n                console.log(action.payload)\n                state.posts.push(action.payload)\n            })\n            .addCase(updatePost.fulfilled, (state, action) => {\n                if (!action.payload?.id) {\n                    console.log('Update could not complete')\n                    console.log(action.payload)\n                    return;\n                }\n                const { id } = action.payload;\n                action.payload.date = new Date().toISOString();\n                const posts = state.posts.filter(post => post.id !== id);\n                state.posts = [...posts, action.payload];\n            })\n            .addCase(deletePost.fulfilled, (state, action) => {\n                if (!action.payload?.id) {\n                    console.log('Delete could not complete')\n                    console.log(action.payload)\n                    return;\n                }\n                const { id } = action.payload;\n                const posts = state.posts.filter(post => post.id !== id);\n                state.posts = posts;\n            })\n    }\n})\n\nexport const selectAllPosts = (state) => state.posts.posts;\nexport const getPostsStatus = (state) => state.posts.status;\nexport const getPostsError = (state) => state.posts.error;\n\nexport const selectPostById = (state, postId) =>\n    state.posts.posts.find(post => post.id === postId);\n\nexport const { postAdded, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}