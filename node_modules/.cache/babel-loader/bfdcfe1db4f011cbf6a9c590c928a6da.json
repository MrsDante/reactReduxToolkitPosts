{"ast":null,"code":"var _jsxFileName = \"/Users/MrsDante/Desktop/React/reactReduxToolkitPosts/src/features/posts/PostsList.js\",\n  _s = $RefreshSig$();\nimport { useSelector } from 'react-redux';\nimport { getPostsStatus, getPostsError, selectIds } from './postsSlice';\n//import { useEffect } from 'react';\nimport PostsExcerpt from './PostsExcerpt';\n\n//selectPostIds,\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostsList = () => {\n  _s();\n  //const dispatch = useDispatch();\n\n  //const orderedPostsIds = useSelector(selectPostIds);\n  const orderedPostsIds = useSelector(selectIds);\n  const postsStatus = useSelector(getPostsStatus);\n  const error = useSelector(getPostsError);\n\n  /*useEffect(() => {\n    if (postsStatus === 'idle') {\n      dispatch(fetchPosts());\n    }\n  }, [postsStatus, dispatch]);*/\n\n  /*const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date))\n   const renderedPosts = orderedPosts.map((post) => (\n    <article key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content.substring(0,100)}</p>\n      <p className=\"postCredit\">\n        <PostAuthor userId={post.userId} />\n        <TimeAgo timestamp={post.date} />\n      </p>\n      <ReactionButtons post={post} />\n    </article>\n  ));*/\n\n  let content;\n  if (postsStatus === 'loading') {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 15\n    }, this);\n  } else if (postsStatus === 'succeeded') {\n    /*const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date));\n    content = orderedPosts.map(post => <PostsExcerpt key={post.id} post={post} />);*/\n    content = orderedPostsIds.map(postId => /*#__PURE__*/_jsxDEV(PostsExcerpt, {\n      postId: postId\n    }, postId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 45\n    }, this));\n  } else if (postsStatus === 'failed') {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(PostsList, \"TtzS/ZtpeJKrLqjP8VbTd5H/ciU=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n_c = PostsList;\nexport default PostsList;\nvar _c;\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"names":["useSelector","getPostsStatus","getPostsError","selectIds","PostsExcerpt","PostsList","orderedPostsIds","postsStatus","error","content","map","postId"],"sources":["/Users/MrsDante/Desktop/React/reactReduxToolkitPosts/src/features/posts/PostsList.js"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport { getPostsStatus, getPostsError, selectIds } from './postsSlice';\n//import { useEffect } from 'react';\nimport PostsExcerpt from './PostsExcerpt';\n\n//selectPostIds,\nconst PostsList = () => {\n  //const dispatch = useDispatch();\n\n  //const orderedPostsIds = useSelector(selectPostIds);\n  const orderedPostsIds = useSelector(selectIds);\n  const postsStatus = useSelector(getPostsStatus);\n  const error = useSelector(getPostsError);\n\n  /*useEffect(() => {\n    if (postsStatus === 'idle') {\n      dispatch(fetchPosts());\n    }\n  }, [postsStatus, dispatch]);*/\n\n  /*const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date))\n\n  const renderedPosts = orderedPosts.map((post) => (\n    <article key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content.substring(0,100)}</p>\n      <p className=\"postCredit\">\n        <PostAuthor userId={post.userId} />\n        <TimeAgo timestamp={post.date} />\n      </p>\n      <ReactionButtons post={post} />\n    </article>\n  ));*/\n\n  let content;\n  if (postsStatus === 'loading') {\n    content = <p>Загрузка...</p>;\n  } else if (postsStatus === 'succeeded') {\n    /*const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date));\n    content = orderedPosts.map(post => <PostsExcerpt key={post.id} post={post} />);*/\n    content = orderedPostsIds.map(postId => <PostsExcerpt key={postId} postId={postId} />)\n  } else if (postsStatus === 'failed') {\n    content = <p>{error}</p>\n  }\n\n  return (\n    <section>\n        {content}\n    </section>\n  )\n}\n\nexport default PostsList;"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,cAAc,EAAEC,aAAa,EAAEC,SAAS,QAAQ,cAAc;AACvE;AACA,OAAOC,YAAY,MAAM,gBAAgB;;AAEzC;AAAA;AACA,MAAMC,SAAS,GAAG,MAAM;EAAA;EACtB;;EAEA;EACA,MAAMC,eAAe,GAAGN,WAAW,CAACG,SAAS,CAAC;EAC9C,MAAMI,WAAW,GAAGP,WAAW,CAACC,cAAc,CAAC;EAC/C,MAAMO,KAAK,GAAGR,WAAW,CAACE,aAAa,CAAC;;EAExC;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,IAAIO,OAAO;EACX,IAAIF,WAAW,KAAK,SAAS,EAAE;IAC7BE,OAAO,gBAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB;EAC9B,CAAC,MAAM,IAAIF,WAAW,KAAK,WAAW,EAAE;IACtC;AACJ;IACIE,OAAO,GAAGH,eAAe,CAACI,GAAG,CAACC,MAAM,iBAAI,QAAC,YAAY;MAAc,MAAM,EAAEA;IAAO,GAAvBA,MAAM;MAAA;MAAA;MAAA;IAAA,QAAoB,CAAC;EACxF,CAAC,MAAM,IAAIJ,WAAW,KAAK,QAAQ,EAAE;IACnCE,OAAO,gBAAG;MAAA,UAAID;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK;EAC1B;EAEA,oBACE;IAAA,UACKC;EAAO;IAAA;IAAA;IAAA;EAAA,QACF;AAEd,CAAC;AAAA,GA5CKJ,SAAS;EAAA,QAIWL,WAAW,EACfA,WAAW,EACjBA,WAAW;AAAA;AAAA,KANrBK,SAAS;AA8Cf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module"}