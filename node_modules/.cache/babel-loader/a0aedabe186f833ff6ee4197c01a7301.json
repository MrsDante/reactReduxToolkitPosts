{"ast":null,"code":"var _jsxFileName = \"/Users/MrsDante/Desktop/React/reactReduxToolkitPosts/src/features/posts/EditPostForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPostById, updatePost, deletePost } from './postsSlice';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { selectAllUsers } from \"../users/usersSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPostForm = () => {\n  _s();\n  const {\n    postId\n  } = useParams();\n  const navigate = useNavigate();\n  const post = useSelector(state => selectPostById(state, Number(postId)));\n  const users = useSelector(selectAllUsers);\n  const [title, setTitle] = useState(post === null || post === void 0 ? void 0 : post.title);\n  const [content, setContent] = useState(post === null || post === void 0 ? void 0 : post.body);\n  const [userId, setUserId] = useState(post === null || post === void 0 ? void 0 : post.userId);\n  const [requestStatus, setRequestStatus] = useState('idle');\n  const dispatch = useDispatch();\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Post not found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  }\n  const onTitleChanged = e => setTitle(e.target.value);\n  const onContentChanged = e => setContent(e.target.value);\n  const onAuthorChanged = e => setUserId(Number(e.target.value));\n  const canSave = [title, content, userId].every(Boolean) && requestStatus === 'idle';\n  const onSavePostClicked = () => {\n    if (canSave) {\n      try {\n        setRequestStatus('pending');\n        dispatch(updatePost({\n          id: post.id,\n          title,\n          body: content,\n          userId,\n          reactions: post.reactions\n        })).unwrap();\n        setTitle('');\n        setContent('');\n        setUserId('');\n        navigate(`/post/${postId}`);\n      } catch (err) {\n        console.error('Failed to save the post', err);\n      } finally {\n        setRequestStatus('idle');\n      }\n    }\n  };\n  const usersOptions = users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: user.id,\n    children: user.name\n  }, user.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this));\n  const onDeletePostClicked = () => {\n    try {\n      setRequestStatus('pending');\n      dispatch(deletePost({\n        id: post.id\n      })).unwrap();\n      setTitle('');\n      setContent('');\n      setUserId('');\n      navigate('/');\n    } catch (err) {\n      console.error('Failed to delete the post', err);\n    } finally {\n      setRequestStatus('idle');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postTitle\",\n        children: \"Post Title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postTitle\",\n        name: \"postTitle\",\n        value: title,\n        onChange: onTitleChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postAuthor\",\n        children: \"Author:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"postAuthor\",\n        value: userId,\n        onChange: onAuthorChanged,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), usersOptions]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postContent\",\n        children: \"Content:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"postContent\",\n        name: \"postContent\",\n        value: content,\n        onChange: onContentChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onSavePostClicked,\n        disabled: !canSave,\n        children: \"Save Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"deleteButton\",\n        type: \"button\",\n        onClick: onDeletePostClicked,\n        children: \"Delete Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(EditPostForm, \"Oxgquyn1S8zYFOowCPFlsYpny2Y=\", false, function () {\n  return [useParams, useNavigate, useSelector, useSelector, useDispatch];\n});\n_c = EditPostForm;\nexport default EditPostForm;\nvar _c;\n$RefreshReg$(_c, \"EditPostForm\");","map":{"version":3,"names":["useState","useDispatch","useSelector","selectPostById","updatePost","deletePost","useParams","useNavigate","selectAllUsers","EditPostForm","postId","navigate","post","state","Number","users","title","setTitle","content","setContent","body","userId","setUserId","requestStatus","setRequestStatus","dispatch","onTitleChanged","e","target","value","onContentChanged","onAuthorChanged","canSave","every","Boolean","onSavePostClicked","id","reactions","unwrap","err","console","error","usersOptions","map","user","name","onDeletePostClicked"],"sources":["/Users/MrsDante/Desktop/React/reactReduxToolkitPosts/src/features/posts/EditPostForm.js"],"sourcesContent":["import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectPostById, updatePost, deletePost } from './postsSlice'\nimport { useParams, useNavigate } from 'react-router-dom'\n\nimport { selectAllUsers } from \"../users/usersSlice\";\n\nconst EditPostForm = () => {\n    const { postId } = useParams()\n    const navigate = useNavigate()\n\n    const post = useSelector((state) => selectPostById(state, Number(postId)))\n    const users = useSelector(selectAllUsers)\n\n    const [title, setTitle] = useState(post?.title)\n    const [content, setContent] = useState(post?.body)\n    const [userId, setUserId] = useState(post?.userId)\n    const [requestStatus, setRequestStatus] = useState('idle')\n\n    const dispatch = useDispatch()\n\n    if (!post) {\n        return (\n            <section>\n                <h2>Post not found!</h2>\n            </section>\n        )\n    }\n\n    const onTitleChanged = e => setTitle(e.target.value)\n    const onContentChanged = e => setContent(e.target.value)\n    const onAuthorChanged = e => setUserId(Number(e.target.value))\n\n    const canSave = [title, content, userId].every(Boolean) && requestStatus === 'idle';\n\n    const onSavePostClicked = () => {\n        if (canSave) {\n            try {\n                setRequestStatus('pending')\n                dispatch(updatePost({ id: post.id, title, body: content, userId, reactions: post.reactions })).unwrap()\n\n                setTitle('')\n                setContent('')\n                setUserId('')\n                navigate(`/post/${postId}`)\n            } catch (err) {\n                console.error('Failed to save the post', err)\n            } finally {\n                setRequestStatus('idle')\n            }\n        }\n    }\n\n    const usersOptions = users.map(user => (\n        <option\n            key={user.id}\n            value={user.id}\n        >{user.name}</option>\n    ))\n\n    const onDeletePostClicked = () => {\n        try {\n            setRequestStatus('pending')\n            dispatch(deletePost({ id: post.id })).unwrap()\n\n            setTitle('')\n            setContent('')\n            setUserId('')\n            navigate('/')\n        } catch (err) {\n            console.error('Failed to delete the post', err)\n        } finally {\n            setRequestStatus('idle')\n        }\n    }\n\n    return (\n        <section>\n            <h2>Edit Post</h2>\n            <form>\n                <label htmlFor=\"postTitle\">Post Title:</label>\n                <input\n                    type=\"text\"\n                    id=\"postTitle\"\n                    name=\"postTitle\"\n                    value={title}\n                    onChange={onTitleChanged}\n                />\n                <label htmlFor=\"postAuthor\">Author:</label>\n                <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n                    <option value=\"\"></option>\n                    {usersOptions}\n                </select>\n                <label htmlFor=\"postContent\">Content:</label>\n                <textarea\n                    id=\"postContent\"\n                    name=\"postContent\"\n                    value={content}\n                    onChange={onContentChanged}\n                />\n                <button\n                    type=\"button\"\n                    onClick={onSavePostClicked}\n                    disabled={!canSave}\n                >\n                    Save Post\n                </button>\n                <button className=\"deleteButton\"\n                    type=\"button\"\n                    onClick={onDeletePostClicked}\n                >\n                    Delete Post\n                </button>\n            </form>\n        </section>\n    )\n}\n\nexport default EditPostForm"],"mappings":"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"},"metadata":{},"sourceType":"module"}