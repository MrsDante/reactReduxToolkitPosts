{"ast":null,"code":"var _jsxFileName = \"/Users/MrsDante/Desktop/React/reactReduxToolkitPosts/src/features/posts/PostsList.js\",\n  _s = $RefreshSig$();\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectAllPosts, getPostsStatus, getPostsError, fetchPosts } from './postsSlice';\nimport { useEffect } from 'react';\nimport PostsExcerpt from './PostsExcerpt';\nimport PostAuthor from './PostAuthor';\nimport TimeAgo from './TimeAgo';\nimport ReactionButtons from './ReactionButtons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostsList = () => {\n  _s();\n  const dispatch = useDispatch();\n  const posts = useSelector(selectAllPosts);\n  const postsStatus = useSelector(getPostsStatus);\n  const error = useSelector(getPostsError);\n  useEffect(() => {\n    if (postsStatus === 'idle') {\n      dispatch(fetchPosts());\n    }\n  }, [postsStatus, dispatch]);\n\n  /*const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date))\n   const renderedPosts = orderedPosts.map((post) => (\n    <article key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content.substring(0,100)}</p>\n      <p className=\"postCredit\">\n        <PostAuthor userId={post.userId} />\n        <TimeAgo timestamp={post.date} />\n      </p>\n      <ReactionButtons post={post} />\n    </article>\n  ));*/\n\n  let content;\n  if (postsStatus === 'loading') {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 15\n    }, this);\n  } else if (postsStatus === 'succeeded') {\n    const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date));\n    content = orderedPosts.map(post => /*#__PURE__*/_jsxDEV(PostsExcerpt, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 40\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u041F\\u043E\\u0441\\u0442\\u044B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), renderedPosts]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(PostsList, \"xOfALbeNiurMcSA9N+vFr+Uoyrc=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = PostsList;\nexport default PostsList;\nvar _c;\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"names":["useSelector","useDispatch","selectAllPosts","getPostsStatus","getPostsError","fetchPosts","useEffect","PostsExcerpt","PostAuthor","TimeAgo","ReactionButtons","PostsList","dispatch","posts","postsStatus","error","content","orderedPosts","slice","sort","a","b","date","localeCompare","map","post","id","renderedPosts"],"sources":["/Users/MrsDante/Desktop/React/reactReduxToolkitPosts/src/features/posts/PostsList.js"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport { selectAllPosts, getPostsStatus, getPostsError, fetchPosts } from './postsSlice';\nimport { useEffect } from 'react';\nimport PostsExcerpt from './PostsExcerpt';\n\nimport PostAuthor from './PostAuthor';\nimport TimeAgo from './TimeAgo';\nimport ReactionButtons from './ReactionButtons';\n\nconst PostsList = () => {\n  const dispatch = useDispatch();\n\n  const posts = useSelector(selectAllPosts);\n  const postsStatus = useSelector(getPostsStatus);\n  const error = useSelector(getPostsError);\n\n  useEffect(() => {\n    if (postsStatus === 'idle') {\n      dispatch(fetchPosts());\n    }\n  }, [postsStatus, dispatch]);\n\n  /*const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date))\n\n  const renderedPosts = orderedPosts.map((post) => (\n    <article key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content.substring(0,100)}</p>\n      <p className=\"postCredit\">\n        <PostAuthor userId={post.userId} />\n        <TimeAgo timestamp={post.date} />\n      </p>\n      <ReactionButtons post={post} />\n    </article>\n  ));*/\n\n  let content;\n  if (postsStatus === 'loading') {\n    content = <p>Загрузка...</p>;\n  } else if (postsStatus === 'succeeded') {\n    const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date));\n    content = orderedPosts.map(post => <PostsExcerpt key={post.id} post={post} />);\n  }\n\n  return (\n    <section>\n        <h2>Посты</h2>\n        {renderedPosts}\n    </section>\n  )\n}\n\nexport default PostsList;"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,EAAEC,cAAc,EAAEC,aAAa,EAAEC,UAAU,QAAQ,cAAc;AACxF,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,eAAe,MAAM,mBAAmB;AAAC;AAEhD,MAAMC,SAAS,GAAG,MAAM;EAAA;EACtB,MAAMC,QAAQ,GAAGX,WAAW,EAAE;EAE9B,MAAMY,KAAK,GAAGb,WAAW,CAACE,cAAc,CAAC;EACzC,MAAMY,WAAW,GAAGd,WAAW,CAACG,cAAc,CAAC;EAC/C,MAAMY,KAAK,GAAGf,WAAW,CAACI,aAAa,CAAC;EAExCE,SAAS,CAAC,MAAM;IACd,IAAIQ,WAAW,KAAK,MAAM,EAAE;MAC1BF,QAAQ,CAACP,UAAU,EAAE,CAAC;IACxB;EACF,CAAC,EAAE,CAACS,WAAW,EAAEF,QAAQ,CAAC,CAAC;;EAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,IAAII,OAAO;EACX,IAAIF,WAAW,KAAK,SAAS,EAAE;IAC7BE,OAAO,gBAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB;EAC9B,CAAC,MAAM,IAAIF,WAAW,KAAK,WAAW,EAAE;IACtC,MAAMG,YAAY,GAAGJ,KAAK,CAACK,KAAK,EAAE,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,IAAI,CAACC,aAAa,CAACH,CAAC,CAACE,IAAI,CAAC,CAAC;IAC/EN,OAAO,GAAGC,YAAY,CAACO,GAAG,CAACC,IAAI,iBAAI,QAAC,YAAY;MAAe,IAAI,EAAEA;IAAK,GAApBA,IAAI,CAACC,EAAE;MAAA;MAAA;MAAA;IAAA,QAAgB,CAAC;EAChF;EAEA,oBACE;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAc,EACbC,aAAa;EAAA;IAAA;IAAA;IAAA;EAAA,QACR;AAEd,CAAC;AAAA,GAzCKhB,SAAS;EAAA,QACIV,WAAW,EAEdD,WAAW,EACLA,WAAW,EACjBA,WAAW;AAAA;AAAA,KALrBW,SAAS;AA2Cf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module"}